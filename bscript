import os
import sys
import copy
import shutil
import subprocess

sys.path.insert(0, os.getcwd())
try:
    from setup import VERSION, ISRELEASED
finally:
    sys.path.pop(0)

from bento.commands.hooks \
    import \
        pre_configure, post_configure, pre_build, post_build
from bento.commands.errors \
    import \
        CommandExecutionFailure
from bento.commands.core \
    import \
        register_command, Command
from bento.installed_package_description \
    import \
        InstalledSection
from yaku.conftests \
    import \
        check_compiler

def check_supported_archs(cfg):
    archs = []
    for arch in ["i386", "x86_64", "ppc", "ppc64"]:
        old_cc = copy.copy(cfg.env["CFLAGS"])
        old_link = copy.copy(cfg.env["LINKFLAGS"])
        try:
            cfg.env["CFLAGS"].extend(["-arch", arch])
            cfg.env["LINKFLAGS"].extend(["-arch", arch])
            st = check_compiler(cfg, msg="Checking whether '-arch %s' is supported" % arch)
            if st:
                archs.append(arch)
        finally:
            cfg.env["CFLAGS"] = old_cc
            cfg.env["LINKFLAGS"] = old_link
    return archs

@pre_configure
def configure(ctx):
    yctx = ctx.yaku_configure_ctx

    if not yctx.builders.has_key("ctasks"):
        yctx.use_tools(["ctasks"])
    if not yctx.builders.has_key("pyext"):
        yctx.use_tools(["pyext"])
    yctx.use_tools(["tpl_tasks"])
    yctx.use_tools(["numpy_templates"], [os.getcwd()])

    # FIXME: fix this once we get rid of distutils configuration
    if "-fPIC" in yctx.env["PYEXT_CFLAGS"]:
        yctx.env["CFLAGS"].append("-fPIC")

    yctx.env["PYEXT_CPPPATH"].insert(0, os.path.join(ctx.local_node.abspath(), "numpy", "core", "include"))

    if sys.platform == "darwin":
        yctx.env["BLAS"] = {"FRAMEWORKS": ["Accelerate"]}
        yctx.env["LAPACK"] = {"FRAMEWORKS": ["Accelerate"]}
        archs = check_supported_archs(yctx)
        for arch in archs:
            for flag in ["CFLAGS", "LINKFLAGS", "SHLINKFLAGS", "PYEXT_CFLAGS", "PYEXT_SHLINKFLAGS"]:
                yctx.env[flag].extend(["-arch", arch])
    elif sys.platform == "win32":
        index = yctx.env["PYEXT_CFLAGS"].index("/Ox")
        yctx.env["PYEXT_CFLAGS"].pop(index)
        yctx.env["CFLAGS"].append("/MD")
    else:
        yctx.env["BLAS"] = {"LIBS": ["f77blas", "cblas", "atlas"]}
        yctx.env["LAPACK"] = {"LIBS": ["lapack", "f77blas",
                                       "cblas", "atlas"]}

    yctx.env["SUBST_DICT"] = {"VERSION": VERSION, "RELEASED": str(ISRELEASED)}

@pre_build
def prebuild(ctx):
    bld = ctx.yaku_build_ctx

    templater = bld.builders["tpl_tasks"]
    tasks = templater.build("version", [os.path.join("numpy", "version.py.in")])
    tasks += templater.build("__config__", [os.path.join("numpy", "__config__.py.in")])

    section_writer = ctx.cmd.section_writer
    section = InstalledSection(
                  "gen_pythonfiles",
                  "library",
                  os.path.join("$_srcrootdir",
                               ctx.yaku_build_ctx.env["BLDDIR"]),
                  "$sitedir",
                  [os.path.join("numpy", "version.py"),
                   os.path.join("numpy", "__config__.py")])
    section_writer.sections["pythonfiles"]["gen_files"] = section

@post_build
def postbuild(ctx):
    bld = ctx.yaku_build_ctx

    if "-i" in sys.argv:
        for f in [os.path.join("numpy", "version.py"),
                  os.path.join("numpy", "__config__.py")]:
            source = bld.bld_root.find_node(f)
            shutil.copy(source.path_from(bld.src_root), f)

class TestCommand(Command):
    def run(self, opts):
        # XXX: we cannot execute tests in-process because we need to import
        # unbuilt numpy early on (to get some build-related bits of numpy), and
        # python cannot reload a package which has changed.
        saved = os.getcwd()
        os.chdir("/")
        try:
            python_path = os.environ.get("PYTHONPATH", "")
            if python_path:
                python_path = saved + os.pathsep + python_path
            else:
                python_path = saved
            env = copy.deepcopy(os.environ)
            env["PYTHONPATH"] = python_path
            p = subprocess.Popen("python -c 'import numpy; numpy.test()'", shell=True)
            p.wait()
        finally:
            os.chdir(saved)

def startup():
    register_command("test", TestCommand)
